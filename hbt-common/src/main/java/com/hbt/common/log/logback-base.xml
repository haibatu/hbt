<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <contextName>base_common</contextName>
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <!-- 读取属性文件中的值来生成日志名称 -->
    <springProperty scope="context" name="app.name" source="spring.application.name" defaultValue="base_microservice"/>
    <springProperty scope="context" name="log.path" source="base.log.path" defaultValue="logs/busi"/>
    <springProperty scope="context" name="console.pattern" source="base.log.pattern.console" defaultValue="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <springProperty scope="context" name="file.pattern" source="base.log.pattern.file" defaultValue="%d{yyyy-MM-dd HH:mm:ss:SSS} %property{app.name} [%thread] %-5level %logger{36}[%L] [TxId : %X{PtxId} , SpanId : %X{PspanId}]- %msg%n"/>

    <!--输出到控制台-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${console.pattern}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <!--输出到文件  info-->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/${app.name}-info-${hostname}.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${log.path}/${app.name}-info-${hostname}.log.%i</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>10</maxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>100MB</maxFileSize>
        </triggeringPolicy>
        <layout>
            <pattern>${file.pattern}</pattern>
        </layout>
    </appender>

    <!-- 输出到文件 error -->
    <appender name="file-error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>WARN</level>
        </filter>
        <file>${log.path}/${app.name}-error-${hostname}.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${log.path}/${app.name}-error-${hostname}.log.%i</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>10</maxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>100MB</maxFileSize>
        </triggeringPolicy>
        <layout>
            <pattern>${file.pattern}</pattern>
        </layout>
    </appender>
    <!-- 输出到文件 logbook -->
    <appender name="file-logbook"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/${app.name}-${hostname}.httpwire</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${log.path}/${app.name}-${hostname}.httpwire.%i</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>10</maxIndex>
        </rollingPolicy>
        <triggeringPolicy
                class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>100MB</maxFileSize>
        </triggeringPolicy>
        <layout>
            <pattern>${file.pattern}</pattern>
        </layout>
    </appender>


    <!-- 异步输出 -->
    <appender name="async-file" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>1000</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="file"/>
    </appender>

    <appender name="async-file-error" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>1000</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="file-error"/>
    </appender>

    <!--本地调试环境
        缺省日志级别：info
    -->
    <springProfile name="local">
        <logger name="com.hbt" level="debug"/>
        <logger name="org.springframework.data.hadoop.hbase" level="debug"/>
        <logger name="druid.sql.Statement" level="debug"/>
        <logger name="druid.sql.ResultSet" level="debug"/>
        <root level="info">
            <appender-ref ref="console"/>
        </root>
    </springProfile>
    <!-- 开发环境(是指微服务平台的开发)
        缺省日志级别：info
     -->
    <springProfile name="dev">
        <logger name="com.hbt" level="debug"/>
        <logger name="org.springframework.data.hadoop.hbase" level="debug"/>
        <logger name="druid.sql.Statement" level="debug" />
        <logger name="druid.sql.ResultSet" level="debug" />
        <!--logbook报文日志-->
        <logger name="http.wire-log" level="info" additivity="false">
            <appender-ref ref="file-logbook"/>
        </logger>
        <root level="info">
            <appender-ref ref="file-error"/>
            <appender-ref ref="file"/>
        </root>
    </springProfile>
    <!-- 测试环境 (是指微服务平台的测试环境)
        缺省日志级别：error
     -->
    <springProfile name="test">
        <logger name="com.hbt.common.log.FuncDaoLogAspect" level="debug" additivity="false">
            <appender-ref ref="async-file-error"/>
            <appender-ref ref="async-file"/>
        </logger>
        <logger name="com.hbt.common.log.FuncServiceLogAspect" level="debug" additivity="false">
            <appender-ref ref="async-file-error"/>
            <appender-ref ref="async-file"/>
        </logger>
        <logger name="com.hbt" level="info"/>
        <!--连接配置中心的日志-->
        <logger name="org.springframework.cloud" level="info"/>
        <!--服务启动端口日志-->
        <logger name="org.springframework.boot.web.embedded" level="info"/>
        <!--actuator 端点日志-->
        <logger name="org.springframework.boot.actuate.endpoint.web" level="info"/>
        <!--logbook报文日志-->
        <logger name="http.wire-log" level="info" additivity="false">
            <appender-ref ref="file-logbook"/>
        </logger>
        <root level="error">
            <appender-ref ref="file-error"/>
            <appender-ref ref="file"/>
        </root>
    </springProfile>

    <!-- 生产环境
        缺省日志级别：error
    -->
    <springProfile name="prod">
        <logger name="com.hbt.common.log.FuncDaoLogAspect" level="error" additivity="false">
            <appender-ref ref="async-file-error"/>
            <appender-ref ref="async-file"/>
        </logger>
        <logger name="com.hbt.common.log.FuncServiceLogAspect" level="error" additivity="false">
            <appender-ref ref="async-file-error"/>
            <appender-ref ref="async-file"/>
        </logger>
        <!--连接配置中心的日志-->
        <logger name="org.springframework.cloud" level="info"/>
        <!--服务启动端口日志-->
        <logger name="org.springframework.boot.web.embedded" level="info"/>
        <!--actuator 端点日志-->
        <logger name="org.springframework.boot.actuate.endpoint.web" level="info"/>
        <!--logbook报文日志-->
        <logger name="http.wire-log" level="info" additivity="false">
            <appender-ref ref="file-logbook"/>
        </logger>
        <root level="error">
            <appender-ref ref="file-error"/>
            <appender-ref ref="file"/>
        </root>
    </springProfile>


</configuration>
